#! /bin/bash

#########THIS part is for Nagios ################################
PROGNAME=`/usr/bin/basename $0`
PROGPATH=`echo $0 | sed -e 's,[\\/][^\\/][^\\/]*$,,'`
REVISION=`echo '$Revision: 1749 $' | sed -e 's/[^0-9.]//g'`
. $PROGPATH/utils.sh

#####################################################################

#Function to print Usage
function usage
{
echo "Usage: $0 -s [apiserver endpoint] -n [minimum number of nodes]"
exit $STATE_UNKNOWN
}

APISERVER=https://kubernetes.default.svc
NAMESPACE=rook-ceph
OSD_COUNT=8
DF_WARN=80
DF_CRIT=90
#####################################################################
# get parameter values in Variables

while test -n "$1"; do
    case "$1" in
         -h)
            usage
            ;;
         -o)
            OSD_COUNT=$2
            shift
            ;;
         -s)
            APISERVER=$2
            shift
            ;;
         -n)
            NAMESPACE=$2
            shift
            ;;
         -w)
            DF_WARN=$2
            shift
            ;;
         -c)
            DF_CRIT=$2
            shift
            ;;
         *)
            echo "Unknown argument: $1"
            usage
            ;;
    esac
    shift
done

#####################################################################

TOKEN=$(cat /run/secrets/kubernetes.io/serviceaccount/token)
KUBECTL="kubectl --server $APISERVER --token $TOKEN --certificate-authority=/run/secrets/kubernetes.io/serviceaccount/ca.crt"

POD=$( $KUBECTL -n $NAMESPACE get pod -l app=rook-ceph-tools -o jsonpath="{.items[0].metadata.name}" 2>&1 )
if [ $? -ne 0 ]; then
        echo "[UNKNOWN] failed to find to ceph tools pod"
        exit $STATE_UNKNOWN
fi

STATUS=$( $KUBECTL -n $NAMESPACE exec $POD ceph status 2>&1 )
if [ $? -ne 0 ]; then
        echo "[ERR] failed to connect to ceph: $STATUS"
        exit $STATE_CRITICAL
fi
if [ "$STATUS" == "" ]; then
        echo "[UNKNOWN] no answer"
        exit $STATE_UNKNOWN
fi

HEALTH=$( echo "$STATUS" | head -n 3 | tail -n 1 | awk '{print $2}' )
if [ "$HEALTH" == "HEALTH_ERR" ]; then
        echo "[ERR] ceph monitor defines a severe problem"
        exit $STATE_CRITICAL
fi
if [ "$HEALTH" == "HEALTH_WARN" ]; then
        echo "[WARN] ceph monitor defines a problem"
        exit $STATE_WARNING
fi

# debugging example:
#OSDS=$( $KUBECTL -n $NAMESPACE exec $POD ceph osd stat 2>&1 )
#if [ ! "$OSDS" == "$OSD_COUNT osds: $OSD_COUNT up, $OSD_COUNT in" ]; then
OSDS=$( echo "$STATUS" | head -n 9 | tail -n 1 )
if [ ! "$OSDS" == "    osd: $OSD_COUNT osds: $OSD_COUNT up, $OSD_COUNT in" ]; then
        echo "[ERR] ceph does not have $OSD_COUNT storage nodes"
        exit $STATE_CRITICAL
fi

USED=$( $KUBECTL -n $NAMESPACE exec rook-tools ceph df | head -n 3 | tail -n 1 | awk '{print $4}')
if (( $(echo "$USED > $DF_CRIT" | bc -l) )); then
        echo "[ERR] $FREE% is space is used"
        exit $STATE_CRITICAL
fi
if (( $(echo "$USED > $DF_WARN" | bc -l) )); then
        echo "[WARN] $FREE% is space is used"
        exit $STATE_WARNING
fi

echo "[OK] ceph is healthy"
exit $STATE_OK
