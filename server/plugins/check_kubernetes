#! /bin/bash

#########THIS part is for Nagios ################################
PROGNAME=`/usr/bin/basename $0`
PROGPATH=`echo $0 | sed -e 's,[\\/][^\\/][^\\/]*$,,'`
REVISION=`echo '$Revision: 1749 $' | sed -e 's/[^0-9.]//g'`
. $PROGPATH/utils.sh

#####################################################################

#Function to print Usage
function usage
{
echo "Usage: $0 -s [apiserver endpoint] -n [minimum number of nodes]"
exit $STATE_UNKNOWN
}


MINIMUM_NODE_COUNT=1
APISERVER=https://kubernetes.default.svc
#####################################################################
# get parameter values in Variables

while test -n "$1"; do
    case "$1" in
         -h)
            usage
            ;;
         -n)
            MINIMUM_NODE_COUNT=$2
            shift
            ;;
         -s)
            APISERVER=$2
            shift
            ;;
         *)
            echo "Unknown argument: $1"
            usage
            ;;
    esac
    shift
done

#####################################################################

TOKEN=$(cat /run/secrets/kubernetes.io/serviceaccount/token)
KUBECTL="kubectl --server $APISERVER --token $TOKEN --certificate-authority=/run/secrets/kubernetes.io/serviceaccount/ca.crt"

STATUS=$( $KUBECTL get --raw='/readyz?verbose' 2>&1 )
if [ $? -ne 0 ]; then
        echo "[ERR] failed to connect to the Kubernetes API health endpoints: $STATUS"
        exit $STATE_CRITICAL
fi
if [ "$STATUS" == "" ]; then
        echo "[UNKNOWN] no answer"
        exit $STATE_UNKNOWN
fi

HEALTH=$(      echo "$STATUS" | grep -E '\betcd '           | awk -F ' ' '{print $2}' )
if [ "$HEALTH" != "ok" ]; then
	echo "[CRIT] etcd is not healthy"
	exit $STATE_CRITICAL
fi
HEALTH=$(      echo "$STATUS" | grep -E '\betcd-readiness ' | awk -F ' ' '{print $2}' )
if [ "$HEALTH" != "ok" ]; then
	echo "[CRIT] etcd-readiness is not healthy"
	exit $STATE_CRITICAL
fi

# https://github.com/kubernetes/kubeadm/issues/2222
# https://github.com/kubernetes/enhancements/issues/553
#HEALTH=$(      echo "$STATUS" | grep scheduler          | awk -F ' ' '{print $2}' )
#if [ "$HEALTH" != "Healthy" ]; then
#	echo "[CRIT] scheduler is not healthy"
#	exit $STATE_CRITICAL
#fi
#HEALTH=$(      echo "$STATUS" | grep controller-manager | awk -F ' ' '{print $2}' )
#if [ "$HEALTH" != "Healthy" ]; then
#	echo "[CRIT] controller-manager is not healthy"
#	exit $STATE_CRITICAL
#fi

NODES=$( $KUBECTL get no --no-headers=true | grep -v NotReady | wc -l )
if [ "$NODES" -lt "$MINIMUM_NODE_COUNT" ]
then
	echo "[CRIT] only $NODES nodes Ready, $MINIMUM_NODE_COUNT desired"
	exit $STATE_CRITICAL
fi

echo "[OK] all k8s-components and nodes report a healthy state"
exit $STATE_OK
